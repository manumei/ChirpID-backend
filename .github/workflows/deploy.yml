name: Deploy ChirpID Backend

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsndfile1 ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run basic tests
        run: |
          python -c "from app import create_app; app = create_app(); print('App created successfully')"
          python server/test_server.py

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to Ubuntu Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            echo "Starting deployment to Ubuntu server..."

            # Update system packages (skip if sudo requires password)
            if sudo -n true 2>/dev/null; then
              sudo apt-get update
            else
              echo "Skipping apt-get update (sudo requires password)"
            fi

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              if sudo -n true 2>/dev/null; then
                sudo sh get-docker.sh
                sudo usermod -aG docker $USER
                sudo systemctl start docker
                sudo systemctl enable docker
              else
                echo "Cannot install Docker without sudo access"
                exit 1
              fi
            fi

            # Login to GitHub Container Registry
            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            echo "Pulling latest image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Stop and remove existing container
            echo "Stopping existing container..."
            docker stop chirpid-backend || true
            docker rm chirpid-backend || true

            # Create necessary directories
            mkdir -p ~/chirpid/uploads
            mkdir -p ~/chirpid/database
            mkdir -p ~/chirpid/logs

            # Start new container
            echo "Starting new container..."
            docker run -d \
              --name chirpid-backend \
              --restart unless-stopped \
              -p 5000:5001 \
              -v ~/chirpid/uploads:/app/app/uploads \
              -v ~/chirpid/database:/app/database \
              -v ~/chirpid/logs:/app/logs \
              -e FLASK_ENV=production \
              -e FLASK_DEBUG=False \
              -e PORT=5001 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Wait for container to start
            echo "Waiting for container to start..."
            sleep 10

            # Check if container is running
            if docker ps | grep -q chirpid-backend; then
              echo "Container started successfully!"
              
              # Test health endpoint
              for i in {1..30}; do
                if curl -f http://localhost:5001/health > /dev/null 2>&1; then
                  echo "Health check passed! Service is ready."
                  break
                elif [ $i -eq 30 ]; then
                  echo "Health check failed after 30 attempts"
                  docker logs chirpid-backend
                  exit 1
                else
                  echo "Health check attempt $i/30..."
                  sleep 2
                fi
              done
              
              # Show container status
              echo "Container status:"
              docker ps | grep chirpid-backend
              
              # Show recent logs
              echo "Recent logs:"
              docker logs --tail 10 chirpid-backend
              
            else
              echo "Failed to start container!"
              docker logs chirpid-backend
              exit 1
            fi

            # Clean up old images to save disk space
            echo "Cleaning up old images..."
            docker image prune -f

            echo "Deployment completed successfully!"

      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            echo "=== Deployment Verification ==="
            echo "Container Status:"
            docker ps --filter name=chirpid-backend --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo -e "\nService Health:"
            curl -s http://localhost:5001/health || echo "Health check failed"

            echo -e "\nDisk Usage:"
            df -h | grep -E "(Filesystem|/dev/)"

            echo -e "\nDocker Images:"
            docker images | grep chirpid

            echo -e "\nService URL: http://${{ secrets.SSH_HOST }}:5000"
