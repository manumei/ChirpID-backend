name: Deploy ChirpID Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Hub credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "❌ Docker Hub credentials are missing"
            echo "Please ensure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets are set"
            echo "DOCKERHUB_USERNAME should be your Docker Hub username"
            echo "DOCKERHUB_TOKEN should be a Personal Access Token from Docker Hub"
            exit 1
          fi
          echo "✅ Docker Hub credentials are available"
          echo "Using Docker Hub username: ${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Ensure app-network exists
        run: |
          echo "🔗 Ensuring app-network exists..."
          docker network create app-network 2>/dev/null || true
          echo "✅ Network app-network is ready"

      - name: Deploy backend service
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "🚀 Deploying ChirpID backend..."

          # Create .env file for docker-compose
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env

          echo "Verifying image availability..."
          if docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:latest; then
            echo "✅ Successfully pulled image from Docker Hub"
          else
            echo "❌ Failed to pull image from Docker Hub"
            echo "This might be because:"
            echo "1. The image doesn't exist yet (first deployment)"
            echo "2. Authentication failed"
            echo "3. Repository doesn't exist on Docker Hub"
            exit 1
          fi

          echo "Stopping existing services..."
          docker-compose down || true

          echo "Starting services..."
          docker-compose up -d

          echo "Waiting for backend to initialize..."
          sleep 30

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."

          if ! docker ps | grep -q "chirpid-backend"; then
            echo "❌ Backend container is not running"
            docker-compose logs backend
            exit 1
          fi

          echo "✅ Backend container is running"

          echo "Testing backend connectivity..."
          max_attempts=6
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts..."
            
            if docker exec chirpid-backend curl -f http://localhost:5001/health > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              break
            elif docker exec chirpid-backend curl -f http://localhost:5001/ > /dev/null 2>&1; then
              echo "✅ Backend is responding on root endpoint"
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo "⚠️ Backend health check failed after $max_attempts attempts"
                echo "Container logs:"
                docker-compose logs backend
              else
                echo "Retrying in 10 seconds..."
                sleep 10
              fi
            fi
            
            attempt=$((attempt + 1))
          done

          echo "📊 Deployment Summary:"
          docker ps | grep chirpid-backend || echo "Container not found in ps output"
          echo "✅ ChirpID backend deployment completed"

      - name: Clean up old images
        run: |
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -af --filter "until=24h" || true

          # Fix permissions for uploads directory before cleanup
          echo "🔧 Fixing permissions for uploads directory..."
          sudo chown -R $USER:$USER ./app/uploads 2>/dev/null || true
          
          # Clean up .env file if it exists
          rm -f .env

          echo "✅ Cleanup completed"
