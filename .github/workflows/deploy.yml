name: Deploy ChirpID Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Pre-checkout cleanup
        run: |
          echo "Pre-checkout cleanup..."
          if [ -d "$GITHUB_WORKSPACE" ]; then
            chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
            chmod -R u+rwX,go+rX,go-w "$GITHUB_WORKSPACE" || true
            rm -rf "$GITHUB_WORKSPACE/app/uploads/"* || true
            rm -rf "$GITHUB_WORKSPACE/app/uploads" || true
            find "$GITHUB_WORKSPACE" \( -name "*.mp3" -o -name "*.wav" -o -name "*.ogg" \) -type f -exec rm -f {} \; || true
          fi
          echo "Pre-checkout cleanup completed"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true
          lfs: true

      - name: Fix workspace permissions
        run: |
          echo "Post-checkout permission fixes..."
          chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE" || true
          mkdir -p app/uploads
          chown -R $(id -u):$(id -g) app/uploads || true
          chmod -R u+rwX,go+rX,go-w app/uploads || true
          rm -rf app/uploads/* || true
          echo "Workspace permissions fixed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Hub credentials
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "Docker Hub credentials are missing"
            exit 1
          fi
          echo "Docker Hub credentials are available"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Ensure app-network exists
        run: |
          docker network create app-network 2>/dev/null || true

      - name: Deploy backend service
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "Deploying ChirpID backend..."
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
          if docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chirpid-backend:latest; then
            echo "Pulled image successfully"
          else
            echo "Failed to pull image"
            exit 1
          fi
          docker-compose down || true
          docker-compose up -d
          sleep 30

      - name: Verify deployment
        run: |
          if ! docker ps | grep -q "chirpid-backend"; then
            docker-compose logs backend
            exit 1
          fi
          max_attempts=6
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if docker exec chirpid-backend curl -f http://localhost:5001/health > /dev/null 2>&1; then
              break
            elif docker exec chirpid-backend curl -f http://localhost:5001/ > /dev/null 2>&1; then
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                docker-compose logs backend
              else
                sleep 10
              fi
            fi
            attempt=$((attempt + 1))
          done
          docker ps | grep chirpid-backend || echo "Container not found"

      - name: Clean up old images
        run: |
          docker image prune -af --filter "until=24h" || true
          chown -R $(id -u):$(id -g) ./app/uploads || true
          chmod -R u+rwX,go+rX,go-w ./app/uploads || true
          rm -f .env
          docker volume prune -f || true
